{"ast":null,"code":"const isAuthenticated = () => {\n  if (localStorage.getItem('CruiserToken')) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst getAuthToken = () => {\n  const cruiserToken = localStorage.getItem('CruiserToken');\n\n  if (cruiserToken) {\n    return cruiserToken.getItem('access_token');\n  } else {\n    return null;\n  }\n};\n\nconst authGet = route => {\n  console.log('authenticated get request');\n};\n\nconst authFetch = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set the auth token in the header\n  const authToken = localStorage.getItem('CruiserToken');\n\n  if (!authToken) {\n    console.log('Unable to retrieve auth token.');\n    return;\n  }\n\n  const headers = {};\n  headers['Authorization'] = 'Bearer ' + authToken;\n  data['headers'] = headers;\n  fetch(url, data).then(resp => {\n    if (resp.status === 401) {\n      console.log('Unauthorized Request');\n      return null;\n    } else {\n      return resp.json();\n    }\n  });\n};\n\nexport { isAuthenticated, getAuthToken, authFetch };","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/auth/AuthFunctions.js"],"names":["isAuthenticated","localStorage","getItem","getAuthToken","cruiserToken","authGet","route","console","log","authFetch","url","data","authToken","headers","fetch","then","resp","status","json"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC1B,MAAIC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAJ,EAA0C;AACtC,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAND;;AAQA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAMC,YAAY,GAAGH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;;AACA,MAAIE,YAAJ,EAAkB;AACd,WAAOA,YAAY,CAACF,OAAb,CAAqB,cAArB,CAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAP;AACH;AACJ,CAPD;;AASA,MAAMG,OAAO,GAAIC,KAAD,IAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,CAFD;;AAIA,MAAMC,SAAS,GAAG,UAACC,GAAD,EAAkB;AAAA,MAAZC,IAAY,uEAAP,EAAO;AAChC;AACA,QAAMC,SAAS,GAAGX,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAlB;;AACA,MAAI,CAACU,SAAL,EAAgB;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA;AACH;;AACD,QAAMK,OAAO,GAAG,EAAhB;AACAA,EAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAYD,SAAvC;AACAD,EAAAA,IAAI,CAAC,SAAD,CAAJ,GAAkBE,OAAlB;AACAC,EAAAA,KAAK,CAACJ,GAAD,EAAMC,IAAN,CAAL,CAAiBI,IAAjB,CAAsBC,IAAI,IAAI;AAC1B,QAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBV,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH,aAAOQ,IAAI,CAACE,IAAL,EAAP;AACH;AACJ,GAPD;AAQH,CAlBD;;AAoBA,SAASlB,eAAT,EAA0BG,YAA1B,EAAwCM,SAAxC","sourcesContent":["const isAuthenticated = () => {\n    if (localStorage.getItem('CruiserToken')) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst getAuthToken = () => {\n    const cruiserToken = localStorage.getItem('CruiserToken');\n    if (cruiserToken) {\n        return cruiserToken.getItem('access_token');\n    } else {\n        return null;\n    }\n}\n\nconst authGet = (route) => {\n    console.log('authenticated get request')\n}\n\nconst authFetch = (url, data={}) => {\n    // set the auth token in the header\n    const authToken = localStorage.getItem('CruiserToken');\n    if (!authToken) {\n        console.log('Unable to retrieve auth token.');\n        return;\n    }\n    const headers = {};\n    headers['Authorization'] = 'Bearer ' + authToken;\n    data['headers'] = headers;\n    fetch(url, data).then(resp => {\n        if (resp.status === 401) {\n            console.log('Unauthorized Request');\n            return null;\n        } else {\n            return resp.json();\n        }\n    });\n}\n\nexport { isAuthenticated, getAuthToken, authFetch }"]},"metadata":{},"sourceType":"module"}