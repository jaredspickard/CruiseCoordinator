{"ast":null,"code":"var _jsxFileName = \"/Users/jaredspickard/Development/cruise-coordinator/src/auth/Authentication.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\"; // Create the context \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // Store boolean to indicate whether a user is authenticated (default false)\n  const [authed, setAuthed] = useState(false); // Store new value to indicate the call has not finished (default true)\n\n  const [loading, setLoading] = useState(true);\n\n  const login = async (email, password) => {\n    // log in to the server\n    const loginResult = await asyncServerLogin(email, password); // if successful, set authed var to true\n\n    if (loginResult) {\n      setAuthed(true);\n    }\n  };\n\n  const loginGoogle = async googleData => {\n    // log in to the server\n    const loginResult = await asyncServerGoogleLogin(googleData.tokenId); // if successful, set authed var to true\n\n    if (loginResult) {\n      setAuthed(true);\n    }\n  };\n\n  const logout = async () => {\n    const logoutResult = await asyncServerLogout();\n\n    if (logoutResult) {\n      setAuthed(false);\n    }\n  };\n\n  const asyncServerLogin = async (email, password) => {\n    // consider pulling email and password from page rather than as a param\n    const resp = await fetch('/api/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: email,\n        password: password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n\n    if (data) {\n      return data.logged_in;\n    } else {\n      return false;\n    }\n  };\n\n  const asyncServerGoogleLogin = async googleTokenId => {\n    const resp = await fetch('/api/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleTokenId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n\n    if (data) {\n      return data.logged_in;\n    } else {\n      return false;\n    }\n  };\n\n  const asyncServerLogout = async () => {\n    const resp = await fetch('/api/logout');\n    const data = await resp.json();\n\n    if (data) {\n      return data.logged_out;\n    } else {\n      return false;\n    }\n  }; // Runs once when the component first mounts\n\n\n  useEffect(() => {\n    asyncServerAuthCheck().then(authenticatedUser => {\n      if (authenticatedUser) {\n        setAuthed(true);\n        setLoading(false);\n      } else {\n        setAuthed(false);\n        setLoading(false);\n      }\n    });\n  }, []); // Verify authentication with server\n\n  const asyncServerAuthCheck = async () => {\n    const resp = await fetch('/api/auth');\n    const data = await resp.json();\n\n    if (data) {\n      return data.authenticated;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // Expose the new `loading` value so we can consume it in `App.tsx`\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        authed,\n        setAuthed,\n        login,\n        logout,\n        loading\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  );\n}; // Finally creating the custom hook \n\n_s(AuthProvider, \"HuesLFcUfohR0V6QuaSQ08eev30=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/auth/Authentication.js"],"names":["React","useState","createContext","useContext","useEffect","AuthContext","AuthProvider","children","authed","setAuthed","loading","setLoading","login","email","password","loginResult","asyncServerLogin","loginGoogle","googleData","asyncServerGoogleLogin","tokenId","logout","logoutResult","asyncServerLogout","resp","fetch","method","body","JSON","stringify","headers","data","json","logged_in","googleTokenId","token","logged_out","asyncServerAuthCheck","then","authenticatedUser","authenticated","useAuth"],"mappings":"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","sourcesContent":["// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\n\n// Create the context \nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n   // Store boolean to indicate whether a user is authenticated (default false)\n   const [authed, setAuthed] = useState(false);\n   // Store new value to indicate the call has not finished (default true)\n   const [loading, setLoading] = useState(true);\n\n   const login = async (email, password) => {\n      // log in to the server\n      const loginResult = await asyncServerLogin(email, password);\n      // if successful, set authed var to true\n      if (loginResult) {\n         setAuthed(true);\n      }\n   }\n\n   const loginGoogle = async (googleData) => {\n      // log in to the server\n      const loginResult = await asyncServerGoogleLogin(googleData.tokenId);\n      // if successful, set authed var to true\n      if (loginResult) {\n         setAuthed(true);\n      }\n   }\n\n   const logout = async () => {\n      const logoutResult = await asyncServerLogout();\n      if (logoutResult) {\n         setAuthed(false);\n      }\n   }\n\n   const asyncServerLogin = async (email, password) => {\n      // consider pulling email and password from page rather than as a param\n      const resp = await fetch('/api/login', {\n         method: 'POST',\n         body: JSON.stringify({\n             email: email,\n             password: password\n         }),\n         headers: {\n             'Content-Type': 'application/json'\n         }\n     });\n     const data = await resp.json();\n     if (data) {\n         return data.logged_in;\n     } else {\n        return false;\n     }\n   }\n\n   const asyncServerGoogleLogin = async (googleTokenId) => {\n      const resp = await fetch('/api/login', {\n         method: 'POST',\n         body: JSON.stringify({\n             token: googleTokenId\n         }),\n         headers: {\n             'Content-Type': 'application/json'\n         }\n     });\n     const data = await resp.json();\n     if (data) {\n         return data.logged_in;\n     } else {\n        return false;\n     }\n   }\n\n   const asyncServerLogout = async () => {\n      const resp = await fetch('/api/logout');\n      const data = await resp.json();\n      if (data) {\n         return data.logged_out;\n      } else {\n         return false;\n      }\n   }\n\n   // Runs once when the component first mounts\n   useEffect(() => {\n      asyncServerAuthCheck().then((authenticatedUser) => {\n         if (authenticatedUser) {\n            setAuthed(true);\n            setLoading(false);\n         } else {\n            setAuthed(false);\n            setLoading(false);\n         }\n      });\n   }, []);\n\n   // Verify authentication with server\n   const asyncServerAuthCheck = async () => {\n      const resp = await fetch('/api/auth');\n      const data = await resp.json();\n      if (data) {\n         return data.authenticated;\n      } else {\n         return false;\n      }\n   }\n\n   return (\n      // Expose the new `loading` value so we can consume it in `App.tsx`\n      <AuthContext.Provider\n         value={{ authed, setAuthed, login, logout, loading }}\n      >\n         {children}\n      </AuthContext.Provider>\n   );\n}\n\n// Finally creating the custom hook \nexport const useAuth = () => useContext(AuthContext);"]},"metadata":{},"sourceType":"module"}