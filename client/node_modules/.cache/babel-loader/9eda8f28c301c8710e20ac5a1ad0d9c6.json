{"ast":null,"code":"const isAuthenticated = () => {\n  if (localStorage.getItem('CruiserToken')) {\n    return true;\n  } else {\n    return false;\n  }\n}; // const isAuthenticated = async () => {\n//     // make a request to the server to check if authenticated\n//     return await fetch('/api/auth').then(async resp => {\n//         console.log(resp)\n//         if (resp.status === 401) {\n//             console.log('auth failed')\n//             return false;\n//         } else {\n//             console.log('auth succed')\n//             return true;\n//         }\n//     });\n// }\n\n\nconst getAuthToken = () => {\n  const cruiserToken = localStorage.getItem('CruiserToken');\n\n  if (cruiserToken) {\n    return cruiserToken.getItem('access_token');\n  } else {\n    return null;\n  }\n};\n\nconst authFetch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set the auth token in the header\n  const authToken = localStorage.getItem('CruiserToken');\n\n  if (!authToken) {\n    console.log('Unable to retrieve auth token.');\n    return;\n  }\n\n  if (!data['headers']) {\n    data['headers'] = {};\n  }\n\n  const headers = data['headers'];\n  headers['Authorization'] = 'Bearer ' + authToken;\n  return fetch(url, data).then(async resp => {\n    if (resp.status === 401) {\n      console.log('Unauthorized Request');\n      return null;\n    } else {\n      return resp.json();\n    }\n  });\n};\n\nexport { isAuthenticated, getAuthToken, authFetch };","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/auth/AuthFunctions.js"],"names":["isAuthenticated","localStorage","getItem","getAuthToken","cruiserToken","authFetch","url","data","authToken","console","log","headers","fetch","then","resp","status","json"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAM;AAC1B,MAAIC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAJ,EAA0C;AACtC,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAND,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAMC,YAAY,GAAGH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;;AACA,MAAIE,YAAJ,EAAkB;AACd,WAAOA,YAAY,CAACF,OAAb,CAAqB,cAArB,CAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAP;AACH;AACJ,CAPD;;AASA,MAAMG,SAAS,GAAG,gBAAOC,GAAP,EAAwB;AAAA,MAAZC,IAAY,uEAAP,EAAO;AACtC;AACA,QAAMC,SAAS,GAAGP,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAlB;;AACA,MAAI,CAACM,SAAL,EAAgB;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA;AACH;;AACD,MAAI,CAACH,IAAI,CAAC,SAAD,CAAT,EAAsB;AAClBA,IAAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,EAAlB;AACH;;AACD,QAAMI,OAAO,GAAGJ,IAAI,CAAC,SAAD,CAApB;AACAI,EAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAYH,SAAvC;AACA,SAAOI,KAAK,CAACN,GAAD,EAAMC,IAAN,CAAL,CAAiBM,IAAjB,CAAsB,MAAMC,IAAN,IAAc;AACvC,QAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBN,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH,aAAOI,IAAI,CAACE,IAAL,EAAP;AACH;AACJ,GAPM,CAAP;AAQH,CApBD;;AAsBA,SAAShB,eAAT,EAA0BG,YAA1B,EAAwCE,SAAxC","sourcesContent":["const isAuthenticated = () => {\n    if (localStorage.getItem('CruiserToken')) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// const isAuthenticated = async () => {\n//     // make a request to the server to check if authenticated\n//     return await fetch('/api/auth').then(async resp => {\n//         console.log(resp)\n//         if (resp.status === 401) {\n//             console.log('auth failed')\n//             return false;\n//         } else {\n//             console.log('auth succed')\n//             return true;\n//         }\n//     });\n// }\n\nconst getAuthToken = () => {\n    const cruiserToken = localStorage.getItem('CruiserToken');\n    if (cruiserToken) {\n        return cruiserToken.getItem('access_token');\n    } else {\n        return null;\n    }\n}\n\nconst authFetch = async (url, data={}) => {\n    // set the auth token in the header\n    const authToken = localStorage.getItem('CruiserToken');\n    if (!authToken) {\n        console.log('Unable to retrieve auth token.');\n        return;\n    }\n    if (!data['headers']) {\n        data['headers'] = {}\n    }\n    const headers = data['headers'];\n    headers['Authorization'] = 'Bearer ' + authToken;\n    return fetch(url, data).then(async resp => {\n        if (resp.status === 401) {\n            console.log('Unauthorized Request');\n            return null;\n        } else {\n            return resp.json();\n        }\n    });\n}\n\nexport { isAuthenticated, getAuthToken, authFetch }"]},"metadata":{},"sourceType":"module"}