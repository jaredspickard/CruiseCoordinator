{"ast":null,"code":"// const isAuthenticated = () => {\n//     if (localStorage.getItem('CruiserToken')) {\n//         return true;\n//     } else {\n//         return false;\n//     }\n// }\nconst isAuthenticated = async () => {\n  // make a request to the server to check if authenticated\n  return await fetch('/api/auth').then(async resp => {\n    console.log(resp);\n\n    if (resp.status === 401) {\n      console.log('auth failed');\n      return false;\n    } else {\n      console.log('auth succed');\n      return true;\n    }\n  });\n};\n\nconst getAuthToken = () => {\n  const cruiserToken = localStorage.getItem('CruiserToken');\n\n  if (cruiserToken) {\n    return cruiserToken.getItem('access_token');\n  } else {\n    return null;\n  }\n};\n\nconst authFetch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set the auth token in the header\n  const authToken = localStorage.getItem('CruiserToken');\n\n  if (!authToken) {\n    console.log('Unable to retrieve auth token.');\n    return;\n  }\n\n  if (!data['headers']) {\n    data['headers'] = {};\n  }\n\n  const headers = data['headers'];\n  headers['Authorization'] = 'Bearer ' + authToken;\n  return fetch(url, data).then(async resp => {\n    if (resp.status === 401) {\n      console.log('Unauthorized Request');\n      return null;\n    } else {\n      return resp.json();\n    }\n  });\n};\n\nexport { isAuthenticated, getAuthToken, authFetch };","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/auth/AuthFunctions.js"],"names":["isAuthenticated","fetch","then","resp","console","log","status","getAuthToken","cruiserToken","localStorage","getItem","authFetch","url","data","authToken","headers","json"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,eAAe,GAAG,YAAY;AAChC;AACA,SAAO,MAAMC,KAAK,CAAC,WAAD,CAAL,CAAmBC,IAAnB,CAAwB,MAAMC,IAAN,IAAc;AAC/CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,QAAIA,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAO,KAAP;AACH,KAHD,MAGO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAO,IAAP;AACH;AACJ,GATY,CAAb;AAUH,CAZD;;AAcA,MAAME,YAAY,GAAG,MAAM;AACvB,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;;AACA,MAAIF,YAAJ,EAAkB;AACd,WAAOA,YAAY,CAACE,OAAb,CAAqB,cAArB,CAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAP;AACH;AACJ,CAPD;;AASA,MAAMC,SAAS,GAAG,gBAAOC,GAAP,EAAwB;AAAA,MAAZC,IAAY,uEAAP,EAAO;AACtC;AACA,QAAMC,SAAS,GAAGL,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAlB;;AACA,MAAI,CAACI,SAAL,EAAgB;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA;AACH;;AACD,MAAI,CAACQ,IAAI,CAAC,SAAD,CAAT,EAAsB;AAClBA,IAAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,EAAlB;AACH;;AACD,QAAME,OAAO,GAAGF,IAAI,CAAC,SAAD,CAApB;AACAE,EAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAYD,SAAvC;AACA,SAAOb,KAAK,CAACW,GAAD,EAAMC,IAAN,CAAL,CAAiBX,IAAjB,CAAsB,MAAMC,IAAN,IAAc;AACvC,QAAIA,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyB;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH,aAAOF,IAAI,CAACa,IAAL,EAAP;AACH;AACJ,GAPM,CAAP;AAQH,CApBD;;AAsBA,SAAShB,eAAT,EAA0BO,YAA1B,EAAwCI,SAAxC","sourcesContent":["// const isAuthenticated = () => {\n//     if (localStorage.getItem('CruiserToken')) {\n//         return true;\n//     } else {\n//         return false;\n//     }\n// }\n\nconst isAuthenticated = async () => {\n    // make a request to the server to check if authenticated\n    return await fetch('/api/auth').then(async resp => {\n        console.log(resp)\n        if (resp.status === 401) {\n            console.log('auth failed')\n            return false;\n        } else {\n            console.log('auth succed')\n            return true;\n        }\n    });\n}\n\nconst getAuthToken = () => {\n    const cruiserToken = localStorage.getItem('CruiserToken');\n    if (cruiserToken) {\n        return cruiserToken.getItem('access_token');\n    } else {\n        return null;\n    }\n}\n\nconst authFetch = async (url, data={}) => {\n    // set the auth token in the header\n    const authToken = localStorage.getItem('CruiserToken');\n    if (!authToken) {\n        console.log('Unable to retrieve auth token.');\n        return;\n    }\n    if (!data['headers']) {\n        data['headers'] = {}\n    }\n    const headers = data['headers'];\n    headers['Authorization'] = 'Bearer ' + authToken;\n    return fetch(url, data).then(async resp => {\n        if (resp.status === 401) {\n            console.log('Unauthorized Request');\n            return null;\n        } else {\n            return resp.json();\n        }\n    });\n}\n\nexport { isAuthenticated, getAuthToken, authFetch }"]},"metadata":{},"sourceType":"module"}