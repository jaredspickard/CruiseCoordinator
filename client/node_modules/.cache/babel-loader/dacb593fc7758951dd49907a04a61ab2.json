{"ast":null,"code":"var _jsxFileName = \"/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js\";\nimport React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Navigate } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport { isAuthenticated } from '../auth/AuthFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst googleClientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLoginFailure = this.handleLoginFailure.bind(this);\n  }\n\n  async handleLoginOld(googleData) {\n    // fetch user data for our backend \n    const resp = await fetch('/api/login/google', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); //store the user in the client\n\n    const data = await resp.json();\n\n    if (data) {\n      const token = data['access_token'];\n      localStorage.setItem('CruiserToken', token);\n      this.setState({});\n    }\n  }\n\n  async handleLogin(googleData) {\n    // fetch user data for our backend \n    const resp = await fetch('/api/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); //store the user in the client\n\n    const data = await resp.json();\n\n    if (data) {\n      console.log(data);\n      localStorage.setItem('CruiserToken', 'fakeToken');\n      this.setState({});\n    }\n  }\n\n  async handleLoginFailure(err) {\n    console.log('Failed to login');\n    console.log(err);\n  }\n\n  render() {\n    const auth = isAuthenticated();\n\n    if (auth) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          noWrap: true,\n          component: \"div\",\n          sx: {\n            mr: 2,\n            display: {\n              xs: 'none',\n              md: 'flex'\n            }\n          },\n          children: \"CruiseCoordinator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Welcome to CruiseCoordinator, your one-stop-shop...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n            clientId: googleClientId,\n            buttonText: \"Sign In with Google\",\n            onSuccess: this.handleLogin,\n            onFailure: this.handleLoginFailure,\n            cookiePolicy: 'single_host_origin'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js"],"names":["React","Typography","Navigate","GoogleLogin","isAuthenticated","googleClientId","Login","Component","constructor","props","handleLogin","bind","handleLoginFailure","handleLoginOld","googleData","resp","fetch","method","body","JSON","stringify","token","tokenId","headers","data","json","localStorage","setItem","setState","console","log","err","render","auth","mr","display","xs","md"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Navigate } from 'react-router-dom'\nimport { GoogleLogin } from 'react-google-login';\nimport { isAuthenticated } from '../auth/AuthFunctions';\n\nconst googleClientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com'\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleLoginFailure = this.handleLoginFailure.bind(this);\n    }\n\n    async handleLoginOld(googleData) {\n\n        // fetch user data for our backend \n        const resp = await fetch('/api/login/google', {\n            method: 'POST',\n            body: JSON.stringify({\n                token: googleData.tokenId\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        //store the user in the client\n        const data = await resp.json();\n        if (data) {\n            const token = data['access_token']\n            localStorage.setItem('CruiserToken', token);\n            this.setState({});\n        }\n    }\n\n    async handleLogin(googleData) {\n        // fetch user data for our backend \n        const resp = await fetch('/api/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                token: googleData.tokenId\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        //store the user in the client\n        const data = await resp.json();\n        if (data) {\n            console.log(data);\n            localStorage.setItem('CruiserToken', 'fakeToken');\n            this.setState({});\n        }\n    }\n\n    async handleLoginFailure(err) {\n        console.log('Failed to login');\n        console.log(err);\n    }\n\n    render() {\n\n        const auth = isAuthenticated();\n\n        if (auth) {\n            return <Navigate to='/' />\n        } else {\n            return (\n                <div>\n                    <Typography\n                        variant=\"h2\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\n                    >\n                        CruiseCoordinator\n                    </Typography>\n                    <h5>Welcome to CruiseCoordinator, your one-stop-shop...</h5>\n                    <div>\n                        <GoogleLogin\n                            clientId={googleClientId}\n                            buttonText='Sign In with Google'\n                            onSuccess={this.handleLogin}\n                            onFailure={this.handleLoginFailure}\n                            cookiePolicy={'single_host_origin'}\n                        />\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}