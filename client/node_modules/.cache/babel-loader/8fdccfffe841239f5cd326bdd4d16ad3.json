{"ast":null,"code":"var _jsxFileName = \"/Users/jaredspickard/Development/cruise-coordinator/src/auth/functions.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\"; // Create the context \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // Store boolean to indicate whether a user is authenticated (default False)\n  const [authed, setAuthed] = useState(false); // Store new value to indicate the call has not finished. Default to true\n\n  const [loading, setLoading] = useState(true);\n\n  const login = async googleTokenId => {\n    // log in to the server\n    const loginResult = await asyncServerLogin(googleTokenId); // if successful, set authed var to true\n\n    if (loginResult) {\n      console.log('Cruiser logged in successfully.');\n      setAuthed(true);\n    }\n  };\n\n  const logout = () => {\n    return null;\n  };\n\n  const asyncServerLogin = async googleTokenId => {\n    // fetch user data for our backend \n    const resp = await fetch('/api/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleTokenId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); // return boolean from server\n\n    const data = await resp.json();\n    console.log(data);\n\n    if (data) {\n      return data.logged_in;\n    } else {\n      return false;\n    }\n  }; // Runs once when the component first mounts\n\n\n  useEffect(() => {\n    authCheck().then(activeUser => {\n      if (activeUser) {\n        console.log(\"fake async login check called\");\n        setAuthed(true);\n        setLoading(false);\n      } else {\n        setAuthed(false);\n        setLoading(false);\n      }\n    });\n  }, []); // Mock call to an authentication endpoint \n\n  const authCheck = async () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(\"Logged In\");\n      }, 300);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // Expose the new `loading` value so we can consume it in `App.tsx`\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        authed,\n        setAuthed,\n        login,\n        logout,\n        loading\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  );\n}; // Finally creating the custom hook \n\n_s(AuthProvider, \"HuesLFcUfohR0V6QuaSQ08eev30=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/auth/functions.js"],"names":["React","useState","createContext","useContext","useEffect","AuthContext","AuthProvider","children","authed","setAuthed","loading","setLoading","login","googleTokenId","loginResult","asyncServerLogin","console","log","logout","resp","fetch","method","body","JSON","stringify","token","headers","data","json","logged_in","authCheck","then","activeUser","Promise","resolve","reject","setTimeout","useAuth"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,UAAzC,EAAqDC,SAArD,QAAsE,OAAtE,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGH,aAAa,CAAC,IAAD,CAAjC;AAEA,OAAO,MAAMI,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC3C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC,CAF2C,CAG3C;;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMW,KAAK,GAAG,MAAOC,aAAP,IAAyB;AACpC;AACA,UAAMC,WAAW,GAAG,MAAMC,gBAAgB,CAACF,aAAD,CAA1C,CAFoC,CAGpC;;AACA,QAAIC,WAAJ,EAAiB;AACdE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAR,MAAAA,SAAS,CAAC,IAAD,CAAT;AACF;AACH,GARD;;AASA,QAAMS,MAAM,GAAG,MAAM;AAAE,WAAO,IAAP;AAAc,GAArC;;AAEA,QAAMH,gBAAgB,GAAG,MAAOF,aAAP,IAAyB;AAC/C;AACA,UAAMM,IAAI,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,KAAK,EAAEZ;AADU,OAAf,CAF8B;AAKpCa,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAL2B,KAAf,CAAxB,CAF+C,CAWhD;;AACA,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACS,IAAL,EAAnB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;;AACA,QAAIA,IAAJ,EAAU;AACN,aAAOA,IAAI,CAACE,SAAZ;AACH,KAFD,MAEO;AACJ,aAAO,KAAP;AACF;AACF,GAnBD,CAjB2C,CAsC3C;;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACb0B,IAAAA,SAAS,GAAGC,IAAZ,CAAkBC,UAAD,IAAgB;AAC9B,UAAIA,UAAJ,EAAgB;AACbhB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAR,QAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACF,OAJD,MAIO;AACJF,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACF;AACH,KATD;AAUF,GAXQ,EAWN,EAXM,CAAT,CAvC2C,CAoD3C;;AACA,QAAMmB,SAAS,GAAG,YAAY;AAC3B,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCC,MAAAA,UAAU,CAAC,MAAM;AACdF,QAAAA,OAAO,CAAC,WAAD,CAAP;AACF,OAFS,EAEP,GAFO,CAAV;AAGF,KAJM,CAAP;AAKF,GAND;;AAQA;AAAA;AACG;AACA,YAAC,WAAD,CAAa,QAAb;AACG,MAAA,KAAK,EAAE;AAAE1B,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBG,QAAAA,KAArB;AAA4BM,QAAAA,MAA5B;AAAoCR,QAAAA;AAApC,OADV;AAAA,gBAGIH;AAHJ;AAAA;AAAA;AAAA;AAAA;AAFH;AAQF,CArEM,C,CAuEP;;GAvEaD,Y;;KAAAA,Y;AAwEb,OAAO,MAAM+B,OAAO,GAAG;AAAA;;AAAA,SAAMlC,UAAU,CAACE,WAAD,CAAhB;AAAA,CAAhB;;IAAMgC,O","sourcesContent":["// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\n\n// Create the context \nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n   // Store boolean to indicate whether a user is authenticated (default False)\n   const [authed, setAuthed] = useState(false);\n   // Store new value to indicate the call has not finished. Default to true\n   const [loading, setLoading] = useState(true);\n\n   const login = async (googleTokenId) => {\n      // log in to the server\n      const loginResult = await asyncServerLogin(googleTokenId);\n      // if successful, set authed var to true\n      if (loginResult) {\n         console.log('Cruiser logged in successfully.');\n         setAuthed(true);\n      }\n   }\n   const logout = () => { return null; }\n\n   const asyncServerLogin = async (googleTokenId) => {\n      // fetch user data for our backend \n      const resp = await fetch('/api/login', {\n         method: 'POST',\n         body: JSON.stringify({\n             token: googleTokenId\n         }),\n         headers: {\n             'Content-Type': 'application/json'\n         }\n     })\n     // return boolean from server\n     const data = await resp.json();\n     console.log(data)\n     if (data) {\n         return data.logged_in;\n     } else {\n        return false;\n     }\n   }\n\n   // Runs once when the component first mounts\n   useEffect(() => {\n      authCheck().then((activeUser) => {\n         if (activeUser) {\n            console.log(\"fake async login check called\");\n            setAuthed(true);\n            setLoading(false);\n         } else {\n            setAuthed(false);\n            setLoading(false);\n         }\n      });\n   }, []);\n\n   // Mock call to an authentication endpoint \n   const authCheck = async () => {\n      return new Promise((resolve, reject) => {\n         setTimeout(() => {\n            resolve(\"Logged In\");\n         }, 300);\n      });\n   }\n\n   return (\n      // Expose the new `loading` value so we can consume it in `App.tsx`\n      <AuthContext.Provider\n         value={{ authed, setAuthed, login, logout, loading }}\n      >\n         {children}\n      </AuthContext.Provider>\n   );\n}\n\n// Finally creating the custom hook \nexport const useAuth = () => useContext(AuthContext);"]},"metadata":{},"sourceType":"module"}