{"ast":null,"code":"var _jsxFileName = \"/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.login = this.login.bind(this);\n    this.authenticatedUser = this.authenticatedUser.bind(this);\n  }\n\n  async handleLogin(googleData) {\n    // TODO: figure out if we want to automatically create user accounts\n    // or redirect them to a page to create their own account\n    // fetch user data for our backend \n    const resp = await fetch('/api/authenticate/google', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }); //store the user in the client\n\n    const data = await resp.json(); // TODO: figure out how to store the user\n  }\n\n  async getThirdPartyToken() {\n    localStorage.setItem('thirdPartyToken', 'abcdef');\n  }\n\n  async getBackendToken() {\n    const thirdPartyToken = localStorage.getItem('thirdPartyToken');\n\n    if (!thirdPartyToken) {\n      console.log('Unable to retrieve ThirdPartyToken.');\n    }\n\n    const backendToken = 'ghijk';\n    localStorage.setItem('backendToken', backendToken);\n  }\n\n  authenticatedUser() {\n    const backendToken = localStorage.getItem('backendToken');\n    console.log(backendToken);\n    console.log(Boolean(backendToken));\n    return Boolean(backendToken);\n  }\n\n  render() {\n    const auth = this.authenticatedUser();\n\n    if (auth) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Login Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: this.login,\n          children: \"Login to \\\"Google\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n            clientId: clientId,\n            buttonText: \"Login with Google\",\n            onSuccess: handleLogin,\n            onFailure: handleLogin,\n            cookiePolicy: 'single_host_origin',\n            isSignedIn: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GoogleLogout, {\n            clientId: clientId,\n            buttonText: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js"],"names":["React","Navigate","Button","GoogleLogin","GoogleLogout","clientId","Login","Component","constructor","props","login","bind","authenticatedUser","handleLogin","googleData","resp","fetch","method","body","JSON","stringify","token","tokenId","headers","data","json","getThirdPartyToken","localStorage","setItem","getBackendToken","thirdPartyToken","getItem","console","log","backendToken","Boolean","render","auth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nconst clientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com'\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.login = this.login.bind(this);\n        this.authenticatedUser = this.authenticatedUser.bind(this);\n    }\n\n    async handleLogin(googleData) {\n\n        // TODO: figure out if we want to automatically create user accounts\n        // or redirect them to a page to create their own account\n\n        // fetch user data for our backend \n        const resp = await fetch('/api/authenticate/google', {\n            method: 'POST',\n            body: JSON.stringify({\n                token: googleData.tokenId\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        //store the user in the client\n        const data = await resp.json()\n        // TODO: figure out how to store the user\n    }\n\n    async getThirdPartyToken() {\n        localStorage.setItem('thirdPartyToken', 'abcdef');\n    }\n\n    async getBackendToken() {\n        const thirdPartyToken = localStorage.getItem('thirdPartyToken');\n        if (!thirdPartyToken) {\n            console.log('Unable to retrieve ThirdPartyToken.');\n        }\n        const backendToken = 'ghijk';\n        localStorage.setItem('backendToken', backendToken);\n    }\n\n    authenticatedUser() {\n        const backendToken = localStorage.getItem('backendToken');\n        console.log(backendToken);\n        console.log(Boolean(backendToken));\n        return Boolean(backendToken);\n    }\n\n    render() {\n\n        const auth = this.authenticatedUser()\n\n        if (auth) {\n            return <Navigate to='/' />\n        } else {\n            return (\n                <div>\n                    <h2>Login Page</h2>\n                    <Button\n                        variant='contained'\n                        onClick={this.login}\n                    >Login to \"Google\"</Button>\n                    <div>\n                        <GoogleLogin\n                            clientId={clientId}\n                            buttonText='Login with Google'\n                            onSuccess={handleLogin}\n                            onFailure={handleLogin}\n                            cookiePolicy={'single_host_origin'}\n                            isSignedIn={true}\n                        />\n                    </div>\n                    <div>\n                        <GoogleLogout\n                            clientId={clientId}\n                            buttonText='Logout'>\n                        </GoogleLogout>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}