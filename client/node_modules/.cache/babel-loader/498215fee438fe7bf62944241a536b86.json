{"ast":null,"code":"var _jsxFileName = \"/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  async handleLogin(googleData) {\n    console.log('handling login');\n    console.log(googleData.tokenId); // TODO: figure out if we want to automatically create user accounts\n    // or redirect them to a page to create their own account\n    // fetch user data for our backend \n    // const resp = await fetch('/api/authenticate/google', {\n    //     method: 'POST',\n    //     body: JSON.stringify({\n    //         token: googleData.tokenId\n    //     }),\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     }\n    // })\n    //store the user in the client\n    // const data = await resp.json()\n    // TODO: figure out how to store the user\n  }\n\n  render() {\n    if (false) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Login Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n            clientId: clientId,\n            buttonText: \"Login with Google\",\n            onSuccess: this.handleLogin,\n            onFailure: this.handleLogin,\n            cookiePolicy: 'single_host_origin',\n            isSignedIn: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GoogleLogout, {\n            clientId: clientId,\n            buttonText: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/jaredspickard/Development/cruise-coordinator/src/pages/Login.js"],"names":["React","Navigate","Button","GoogleLogin","GoogleLogout","clientId","Login","Component","constructor","props","handleLogin","bind","googleData","console","log","tokenId","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;;AAEA,MAAMC,QAAQ,GAAG,0EAAjB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEgB,QAAXD,WAAW,CAACE,UAAD,EAAa;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,OAAvB,EAF0B,CAI1B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,QAAI,KAAJ,EAAW;AACP,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAEO;AACH,0BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,iCACI,QAAC,WAAD;AACI,YAAA,QAAQ,EAAEX,QADd;AAEI,YAAA,UAAU,EAAC,mBAFf;AAGI,YAAA,SAAS,EAAE,KAAKK,WAHpB;AAII,YAAA,SAAS,EAAE,KAAKA,WAJpB;AAKI,YAAA,YAAY,EAAE,oBALlB;AAMI,YAAA,UAAU,EAAE;AANhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAYI;AAAA,iCACI,QAAC,YAAD;AACI,YAAA,QAAQ,EAAEL,QADd;AAEI,YAAA,UAAU,EAAC;AAFf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAqBH;AACJ;;AAxD+B;;AA2DpC,eAAeC,KAAf","sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nconst clientId = '301139010020-rm1mnr8dlnd3656lt8j5f1gv6o001uv6.apps.googleusercontent.com'\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    async handleLogin(googleData) {\n        console.log('handling login')\n        console.log(googleData.tokenId);\n\n        // TODO: figure out if we want to automatically create user accounts\n        // or redirect them to a page to create their own account\n\n        // fetch user data for our backend \n        // const resp = await fetch('/api/authenticate/google', {\n        //     method: 'POST',\n        //     body: JSON.stringify({\n        //         token: googleData.tokenId\n        //     }),\n        //     headers: {\n        //         'Content-Type': 'application/json'\n        //     }\n        // })\n        //store the user in the client\n        // const data = await resp.json()\n        // TODO: figure out how to store the user\n    }\n\n    render() {\n\n        if (false) {\n            return <Navigate to='/' />\n        } else {\n            return (\n                <div>\n                    <h2>Login Page</h2>\n                    <div>\n                        <GoogleLogin\n                            clientId={clientId}\n                            buttonText='Login with Google'\n                            onSuccess={this.handleLogin}\n                            onFailure={this.handleLogin}\n                            cookiePolicy={'single_host_origin'}\n                            isSignedIn={true}\n                        />\n                    </div>\n                    <div>\n                        <GoogleLogout\n                            clientId={clientId}\n                            buttonText='Logout'>\n                        </GoogleLogout>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}